/*
File:        dot_graph.cc
Author:      Timothy Trippel
Affiliation: MIT Lincoln Laboratory
Description:

This is an Icarus Verilog backend target module that generates a signal
dependency graph for a given circuit design. The output format is a 
Graphviz .dot file.
*/

// Standard Headers
#include <cassert>

using namespace std;

// TTB Headers
#include "ttb.h"
#include "dot_graph.h"

Dot_Graph::Dot_Graph(): file_path(NULL), file_ptr(NULL){}

Dot_Graph::Dot_Graph(const char* p): file_ptr(NULL){
	set_file_path(p);
}

void Dot_Graph::set_file_path(const char* p){
	file_path = p;
}

const char* Dot_Graph::get_file_path(){
	return file_path;
}

FILE* Dot_Graph::get_file_ptr(){
	return file_ptr;
}

void Dot_Graph::open_file(){
	file_ptr = fopen(file_path, "w");
	if (!file_ptr) {
		printf("ERROR: Could not open file %s\n", file_path ? file_path : "stdout");
		exit(-4);
	}
}

void Dot_Graph::close_file(){
	fclose(file_ptr);
	file_ptr = NULL;
}

unsigned long Dot_Graph::get_msb(ivl_signal_t sig){
	unsigned num_dimens = ivl_signal_packed_dimensions(sig);

	if (num_dimens == 0) {
		return 0;
	} else{
		return ivl_signal_packed_msb(sig, 0);
	}
}

unsigned long Dot_Graph::get_lsb(ivl_signal_t sig){
	unsigned num_dimens = ivl_signal_packed_dimensions(sig);
	
	if (num_dimens == 0) {
		return 0;
	} else{
		return ivl_signal_packed_lsb(sig, 0);
	}
}

void Dot_Graph::init_graph(){
	open_file();
	fprintf(file_ptr, "digraph G {\n");
}

string Dot_Graph::get_signal_fullname(ivl_signal_t sig){
	string scopename = string(ivl_scope_name(ivl_signal_scope(sig))); 
	string basename  = string(ivl_signal_basename(sig));
	string fullname  = string(scopename + string(".") + basename);

	return fullname;
}

string Dot_Graph::get_constant_fullname(ivl_net_const_t con){
	string scopename = string(ivl_scope_name(ivl_const_scope(con))); 
	string basename  = string(ivl_const_bits(con), (size_t)ivl_const_width(con));
	reverse(basename.begin(), basename.end());
	string fullname  = string(scopename + string(".const_") + basename);

	return fullname;
}

void Dot_Graph::add_signal_node(ivl_signal_t sig){
	string fullname = get_signal_fullname(sig);

	fprintf(file_ptr, "\t\"%s\" [shape=%s, label=\"%s[%lu:%lu]\"];\n", 
		fullname.c_str(), SIGNAL_NODE_SHAPE, fullname.c_str(), get_msb(sig), get_lsb(sig));
}

void Dot_Graph::add_local_signal_node(ivl_signal_t sig){
	string fullname = get_signal_fullname(sig);

	fprintf(file_ptr, "\t\"%s\" [shape=%s, label=\"%s[%lu:%lu]\"];\n", 
		fullname.c_str(), LOCAL_SIGNAL_NODE_SHAPE, fullname.c_str(), get_msb(sig), get_lsb(sig));
}

void Dot_Graph::add_ff_node(ivl_signal_t sig){
	string fullname = get_signal_fullname(sig);

	fprintf(file_ptr, "\t\"%s\" [shape=%s, label=\"%s[%lu:%lu]\"];\n", 
		fullname.c_str(), FF_NODE_SHAPE, fullname.c_str(), get_msb(sig), get_lsb(sig));
}

void Dot_Graph::add_input_node(ivl_signal_t sig){
	string fullname = get_signal_fullname(sig);

	fprintf(file_ptr, "\t\"%s\" [shape=%s, label=\"%s[%lu:%lu]\"];\n", 
		fullname.c_str(), INPUT_NODE_SHAPE, fullname.c_str(), get_msb(sig), get_lsb(sig));
}

void Dot_Graph::add_const_node(ivl_net_const_t con){
	string fullname = get_constant_fullname(con);

	fprintf(file_ptr, "\t\"%s\" [shape=%s, label=\"%s[%lu:%lu]\"]; /* Constant */\n", 
		fullname.c_str(), CONST_NODE_SHAPE, fullname.c_str(), (unsigned long) (ivl_const_width(con) - 1), (unsigned long) 0);
}


void Dot_Graph::add_connection(ivl_signal_t aff_sig, ivl_signal_t sig){
	ivl_net_const_t con;

	// First Signal Name
	string fullname_1 = get_signal_fullname(aff_sig);
	
	// Second Signal Name
	string fullname_2 = get_signal_fullname(sig);

	if ((con = is_const_local_sig(sig))){
		// Add constant node to graph
		add_const_node(con);

		// signal was generated by the IVL compiler as
		// the output of a constant object, add constant
		// connection only
		add_const_connection(aff_sig, con);
	} else {
		// Add connection to .dot file
		fprintf(file_ptr, "\t\"%s\" -> \"%s\"[label=\"[%lu:%lu]->[%lu:%lu]\"];\n", 
			fullname_2.c_str(), fullname_1.c_str(), get_msb(sig), get_lsb(sig), get_msb(aff_sig), get_lsb(aff_sig));	
	}
}

void Dot_Graph::add_spliced_connection(ivl_signal_t aff_sig, 
									   unsigned long aff_sig_msb, 
									   unsigned long aff_sig_lsb, 
							           ivl_signal_t  sig, 
							           unsigned long sig_msb, 
							           unsigned long sig_lsb){
	ivl_net_const_t con;

	// First Signal Name
	string fullname_1 = get_signal_fullname(aff_sig);
	
	// Second Signal Name
	string fullname_2 = get_signal_fullname(sig);

	if ((con = is_const_local_sig(sig))){
		// signal was generated by the IVL compiler as
		// the output of a constant object, add constant
		// connection only
		assert(false && "ERROR: cannot connect a spliced constant.");
	} else {
		fprintf(file_ptr, "\t\"%s\" -> \"%s\"[label=\"[%lu:%lu]->[%lu:%lu]\"];\n", 
			fullname_2.c_str(), fullname_1.c_str(), sig_msb, sig_lsb, aff_sig_msb, aff_sig_lsb);	
	}	
}

void Dot_Graph::add_const_connection(ivl_signal_t aff_sig, ivl_net_const_t con){
	// First Signal Name
	string fullname_1 = get_signal_fullname(aff_sig);
	
	// Second Signal Name
	string fullname_2 = get_constant_fullname(con);

	fprintf(file_ptr, "\t\"%s\" -> \"%s\"[label=\"[%lu:%lu]->[%lu:%lu]\"];\n", 
		fullname_2.c_str(), fullname_1.c_str(), 
		(unsigned long) (ivl_const_width(con) - 1), (unsigned long) 0, 
		get_msb(aff_sig), get_lsb(aff_sig));
}

void Dot_Graph::save_graph(){
	fprintf(file_ptr, "}\n");
	close_file();
}
